// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManangerSystem.Services;

#nullable disable

namespace TaskManangerSystem.Migrations
{
    [DbContext(typeof(ManagementSystemContext))]
    [Migration("20240315054115_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<int>("CategoryLevel")
                        .HasColumnType("int")
                        .HasColumnName("category_level");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_category_id");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<int>("SortSerial")
                        .HasColumnType("int")
                        .HasColumnName("sort_serial");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("category_table");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.EmployeeAccount", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("employee_electronic_account_id");

                    b.Property<int>("AccountPermission")
                        .HasColumnType("int")
                        .HasColumnName("account_permission");

                    b.Property<string>("EmployeeAlias")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("alias");

                    b.Property<string>("EmployeePwd")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("employee_pwd");

                    b.HasKey("EmployeeId");

                    b.ToTable("employee_system_account_table");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.EmployeeRealInfo", b =>
                {
                    b.Property<Guid>("EmployeeElectronicAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("EmployeeContactWay")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeSystemAccountEmployeeId")
                        .HasColumnType("char(36)");

                    b.HasKey("EmployeeElectronicAccountId");

                    b.HasIndex("EmployeeSystemAccountEmployeeId");

                    b.ToTable("employee_real_info_table");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.EncryptAccount", b =>
                {
                    b.Property<int>("AccountPermission")
                        .HasColumnType("int")
                        .HasColumnName("account_permission");

                    b.Property<string>("EmployeeAlias")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("alias");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("EmployeePwd")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pwd");

                    b.Property<string>("EncryptionId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("encryption_id");

                    b.ToTable("encryption");

                    b.ToView("encryption", (string)null);
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.InOutStock", b =>
                {
                    b.Property<Guid>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeSystemAccountEmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("InOutStockType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("InventoryInfoProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MaterialQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TaskCustomerCustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.HasKey("ListId");

                    b.HasIndex("EmployeeSystemAccountEmployeeId");

                    b.HasIndex("InventoryInfoProductId");

                    b.HasIndex("TaskCustomerCustomerId");

                    b.HasIndex("TaskId");

                    b.ToTable("inOutStocks");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.InventoryInfo", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductType")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("inventoryInfos");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.TaskAffair", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("EmployeeAccountEmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TaskId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeAccountEmployeeId");

                    b.ToTable("task_table");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.TaskCustomer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("add_time");

                    b.Property<int>("ClientGrade")
                        .HasColumnType("int")
                        .HasColumnName("client_grade");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_address");

                    b.Property<string>("CustomerContactWay")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_contact_way");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("customer_name");

                    b.Property<Guid>("CustomerType")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_type");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerType");

                    b.ToTable("task_customer_table");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.TaskStatusTrack", b =>
                {
                    b.Property<Guid>("TaskSatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("task_id");

                    b.Property<Guid>("EmployeeAccountEmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TaskTrackTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TaskSatusId");

                    b.HasIndex("EmployeeAccountEmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("tracks");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.Category", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.EmployeeRealInfo", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.EmployeeAccount", "EmployeeSystemAccount")
                        .WithMany()
                        .HasForeignKey("EmployeeSystemAccountEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSystemAccount");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.InOutStock", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.EmployeeAccount", "EmployeeSystemAccount")
                        .WithMany()
                        .HasForeignKey("EmployeeSystemAccountEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManangerSystem.Models.DataBean.InventoryInfo", "InventoryInfo")
                        .WithMany()
                        .HasForeignKey("InventoryInfoProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManangerSystem.Models.DataBean.TaskCustomer", "TaskCustomer")
                        .WithMany()
                        .HasForeignKey("TaskCustomerCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManangerSystem.Models.DataBean.TaskAffair", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSystemAccount");

                    b.Navigation("InventoryInfo");

                    b.Navigation("Task");

                    b.Navigation("TaskCustomer");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.InventoryInfo", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.TaskAffair", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.TaskCustomer", "TaskCustomer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TaskManangerSystem.Models.DataBean.EmployeeAccount", "EmployeeAccount")
                        .WithMany()
                        .HasForeignKey("EmployeeAccountEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAccount");

                    b.Navigation("TaskCustomer");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.TaskCustomer", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CustomerType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TaskManangerSystem.Models.DataBean.TaskStatusTrack", b =>
                {
                    b.HasOne("TaskManangerSystem.Models.DataBean.EmployeeAccount", "EmployeeAccount")
                        .WithMany()
                        .HasForeignKey("EmployeeAccountEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManangerSystem.Models.DataBean.TaskAffair", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAccount");

                    b.Navigation("Task");
                });
#pragma warning restore 612, 618
        }
    }
}
